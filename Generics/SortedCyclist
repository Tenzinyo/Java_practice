package Generics;

import java.util.*;
import java.util.function.Predicate;

public class SortedCyclist<T extends Comparable<T>> {
    private List<T> list=new ArrayList<>();
    private int iterator=0;

    public T next(){
        T item = list.get(iterator);
        iterator=iterator%list.size();
        return item;
    }
    public void add(T value){
        list.add(value);
        Collections.sort(list);
    }
    public boolean contains(T value){
        return list.contains(value);
    }
    public void remove(T value){
        list.remove(value);
    }
    public void addAll(Collection<? extends T > collection){
        list.addAll(collection);
        Collections.sort(list);
    }
    public static <T> T findFirst(Predicate<T> pred,Collection<T> collection){
        for(T item:collection){
            if (pred.test(item)){
                return item;
            }
        }
        return null;
    }

    public static double[] co(int n){
        double[] d=new double[n];

        for(int i=0;i<n;i++){
            d[i]=Math.pow(2,i);
        }
        return d;

    }

    public void tra(){
        final int height = 5;
        int width=height;
        int triangle[][] = new int[height][];
        for (int i = 0; i < height; i++) {
            triangle[i]=new int[height-i];
            for (int j = 0; j < height-i; j++) {
                triangle[i][j]=i+j+1;

            }
        }
    }
    public static void s(String s){
        int count=0;
        int count_uc=0;
        int count_lc=0;
        Scanner scanner= new Scanner(System.in);
        String text=scanner.nextLine();
        for (int i=0;i<text.length();i++){
            char c = text.charAt(i);
            if (Character.isLowerCase(c)){
                count_uc+=1;
            }
            if(scanner.hasNext(s.toUpperCase())){

            }
        }
    }


}
